- name: Initialize proxmox node
  hosts: proxmox
  become: true
  vars:
    - proxmox_no_sub: "https://download.proxmox.com/debian/pve bullseye pve-no-subscription"
  tasks:
    - name: Disable proxmox enterprise source
      lineinfile:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        state: present
        regexp: "^deb {{ proxmox_no_sub }}"
        line: "# deb {{ proxmox_no_sub }}"

    - name: Add proxmox no-subscription source
      lineinfile:
        path: /etc/apt/sources.list
        state: present
        line: "deb {{ proxmox_no_sub }}"

    - name: Disable no subscription popup
      shell: >
        sed -Ezi.bak
        "s/(Ext.Msg.show\(\{\s+title: gettext\('No valid sub)/void\(\{ \/\/\1/g"
        /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
        && systemctl restart pveproxy.service
      # TODO: add when: if js file already has tweek, then no service restart

    - name: Update repos and cache
      apt:
        update_cache: true
        force_apt_get: true
        cache_valid_time: 3600

    - name: Ensure sudo is installed
      apt:
        name: sudo
        state: present
    
    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist
        force_apt_get: true
  
    - name: Check CPU vendor
      shell: cat /proc/cpuinfo | grep "vendor_id"
      register: cpu_vendor

    - name: Enable IOMMU in GRUB for AMD processors
      lineinfile:
        path: /etc/default/grub
        regexp: "^GRUB_CMDLINE_LINUX_DEFAULT"
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet amd_iommu=on pcie_acs_override=downstream,multifunction'
      register: grub
      when: cpu_vendor | search("AuthenticAMD")

      # TODO: intel IOMMU
      # line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on pcie_acs_override=downstream,multifunction'
      # when: cpu_vendor | search("GenuineIntel")

      # TODO: use variable instead? iommu = is_amd ? amd_iommu : intel_iommu
    
    - name: Update GRUB
      shell: update-grub
      when: grub.changed
    
    - name: Enable IOMMU kernel modules
      lineinfile:
        path: /etc/modules
        regexp: "^{{ item }}"
        line: "{{ item }}"
      loop:
        - vfio
        - vfio_iommu_type1
        - vfio_pci
        - vfio_virqfd
      register: kernel_modules
    
    - name: Update root file system
      shell: update-initramfs -u -k all
      when: kernel_modules.changed
    
    - name: Reboot to finish installing IOMMU kernel modules
      reboot:
        msg: "Reboot started by Ansible to install kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: kernel_modules.changed

    - name: Get IOMMU groups
      shell: find /sys/kernel/iommu_groups/ -type l
      register: iommu_groups
    - debug: msg="{{ iommu_groups.stdout }}"
  